
commTx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005e9  00800066  00800066  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a25  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a4  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000493  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026a  00000000  00000000  000020e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_13>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 34       	cpi	r26, 0x4F	; 79
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8a:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HardWare_CallBack>:
static bool_t			flage_Tx_Sending;


static void HardWare_CallBack()
{
	if (Scounter < SN_Byte2Sent)
  92:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Scounter>
  96:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Scounter+0x1>
  9a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <SN_Byte2Sent>
  9e:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <SN_Byte2Sent+0x1>
  a2:	82 17       	cp	r24, r18
  a4:	93 07       	cpc	r25, r19
  a6:	98 f4       	brcc	.+38     	; 0xce <HardWare_CallBack+0x3c>
	{
		Uart_SendByte(Sptr_Data2Sent[Scounter]);
  a8:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <Sptr_Data2Sent>
  ac:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Sptr_Data2Sent+0x1>
  b0:	f9 01       	movw	r30, r18
  b2:	e8 0f       	add	r30, r24
  b4:	f9 1f       	adc	r31, r25
  b6:	80 81       	ld	r24, Z
  b8:	0e 94 2a 01 	call	0x254	; 0x254 <Uart_SendByte>
		Scounter++;
  bc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Scounter>
  c0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Scounter+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Scounter+0x1>
  ca:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Scounter>
  ce:	08 95       	ret

000000d0 <comm_TxRest>:
	SCall_back_commtx_compelete();
}

void comm_TxRest()
{
	Scounter			= 0;
  d0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Scounter+0x1>
  d4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Scounter>
	flage_Tx_Sending    = 0;
  d8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
  dc:	08 95       	ret

000000de <comm_TxInit>:
}

void comm_TxInit(CommTx_DataCfgType* ptr_struct)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	comm_TxRest();													// rest static variables
  e4:	0e 94 68 00 	call	0xd0	; 0xd0 <comm_TxRest>
	Uart_init();													// init the state
  e8:	0e 94 21 01 	call	0x242	; 0x242 <Uart_init>
	Uart_TxInterruptEnable(HardWare_CallBack);
  ec:	89 e4       	ldi	r24, 0x49	; 73
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 2e 01 	call	0x25c	; 0x25c <Uart_TxInterruptEnable>
	
	SCall_back_commtx_compelete = ptr_struct->Call_back_commtx_compelete;  //save Data in the static variables
  f4:	88 81       	ld	r24, Y
  f6:	99 81       	ldd	r25, Y+1	; 0x01
  f8:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <SCall_back_commtx_compelete+0x1>
  fc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <SCall_back_commtx_compelete>
	Sptr_Data2Sent			    = ptr_struct->ptr_Data2Sent;
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	9b 81       	ldd	r25, Y+3	; 0x03
 104:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Sptr_Data2Sent+0x1>
 108:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Sptr_Data2Sent>
	SN_Byte2Sent				= ptr_struct->N_Byte2Sent;
 10c:	8c 81       	ldd	r24, Y+4	; 0x04
 10e:	9d 81       	ldd	r25, Y+5	; 0x05
 110:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <SN_Byte2Sent+0x1>
 114:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <SN_Byte2Sent>
	
	flage_Tx_Sending =1;												// set flage to work dispatch 
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <comm_TxDisspatch>:

void comm_TxDisspatch()
{
	if (flage_Tx_Sending)
 124:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 128:	88 23       	and	r24, r24
 12a:	91 f0       	breq	.+36     	; 0x150 <comm_TxDisspatch+0x2c>
	{
		if (Scounter == SN_Byte2Sent)
 12c:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Scounter>
 130:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Scounter+0x1>
 134:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <SN_Byte2Sent>
 138:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <SN_Byte2Sent+0x1>
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	39 f4       	brne	.+14     	; 0x150 <comm_TxDisspatch+0x2c>
	}
}

static void comm_TxSendCompelete()
{
	flage_Tx_Sending = 0;
 142:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
	SCall_back_commtx_compelete();
 146:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <SCall_back_commtx_compelete>
 14a:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <SCall_back_commtx_compelete+0x1>
 14e:	09 95       	icall
 150:	08 95       	ret

00000152 <send_CompeletNotifyme>:

#define N_Data 1500

void send_CompeletNotifyme()
{
	Uart_SendByte('o');
 152:	8f e6       	ldi	r24, 0x6F	; 111
 154:	0e 94 2a 01 	call	0x254	; 0x254 <Uart_SendByte>
	Uart_SendByte('k');
 158:	8b e6       	ldi	r24, 0x6B	; 107
 15a:	0e 94 2a 01 	call	0x254	; 0x254 <Uart_SendByte>
 15e:	08 95       	ret

00000160 <main>:


static uint8  Ascii[N_Data];

int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <main+0x6>
 166:	00 d0       	rcall	.+0      	; 0x168 <main+0x8>
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0xa>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	ef e6       	ldi	r30, 0x6F	; 111
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	2b e4       	ldi	r18, 0x4B	; 75
 174:	36 e0       	ldi	r19, 0x06	; 6
 176:	80 e0       	ldi	r24, 0x00	; 0
	uint16 i;
	for (i=0;i<N_Data;i++)
	{
		Ascii[i]=i;
 178:	81 93       	st	Z+, r24
 17a:	8f 5f       	subi	r24, 0xFF	; 255
static uint8  Ascii[N_Data];

int main(void)
{
	uint16 i;
	for (i=0;i<N_Data;i++)
 17c:	e2 17       	cp	r30, r18
 17e:	f3 07       	cpc	r31, r19
 180:	d9 f7       	brne	.-10     	; 0x178 <main+0x18>
	{
		Ascii[i]=i;
	}

	CommTx_DataCfgType test_Data={send_CompeletNotifyme,Ascii,N_Data};
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	e0 e6       	ldi	r30, 0x60	; 96
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	de 01       	movw	r26, r28
 18a:	11 96       	adiw	r26, 0x01	; 1
 18c:	01 90       	ld	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	8a 95       	dec	r24
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x2c>
	
	sei();
 194:	78 94       	sei
	DDRD |= 1<<1;
 196:	89 9a       	sbi	0x11, 1	; 17
	comm_TxInit(&test_Data);
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	0e 94 6f 00 	call	0xde	; 0xde <comm_TxInit>
	
	while (1)
	{
		comm_TxDisspatch();
 1a0:	0e 94 92 00 	call	0x124	; 0x124 <comm_TxDisspatch>
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <main+0x40>

000001a6 <__vector_14>:

uint8 Uart_ReadByte()
{
	while (!(ACCESS_REG_8BIT((UARTCONTROLA+UART_BASE)) & (1 << RXC)));       // checking is that recieve completed
	return UDR;
}
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <ptr_CallBackfnUartTx>
 1cc:	f0 91 4e 06 	lds	r31, 0x064E	; 0x80064e <ptr_CallBackfnUartTx+0x1>
 1d0:	09 95       	icall
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_13>:
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	e0 91 4b 06 	lds	r30, 0x064B	; 0x80064b <ptr_CallBackfnUartRx>
 21a:	f0 91 4c 06 	lds	r31, 0x064C	; 0x80064c <ptr_CallBackfnUartRx+0x1>
 21e:	09 95       	icall
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <Uart_init>:
 242:	89 e1       	ldi	r24, 0x19	; 25
 244:	89 b9       	out	0x09, r24	; 9
 246:	8a b1       	in	r24, 0x0a	; 10
 248:	88 61       	ori	r24, 0x18	; 24
 24a:	8a b9       	out	0x0a, r24	; 10
 24c:	80 b5       	in	r24, 0x20	; 32
 24e:	86 68       	ori	r24, 0x86	; 134
 250:	80 bd       	out	0x20, r24	; 32
 252:	08 95       	ret

00000254 <Uart_SendByte>:
 254:	5d 9b       	sbis	0x0b, 5	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <Uart_SendByte>
 258:	8c b9       	out	0x0c, r24	; 12
 25a:	08 95       	ret

0000025c <Uart_TxInterruptEnable>:

void Uart_TxInterruptEnable(void (*ptr)())
{
	ptr_CallBackfnUartTx=ptr;           // assign ptr to call back fun
 25c:	90 93 4e 06 	sts	0x064E, r25	; 0x80064e <ptr_CallBackfnUartTx+0x1>
 260:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <ptr_CallBackfnUartTx>
	ACCESS_REG_8BIT((UARTCONTROLB+UART_BASE)) |= 1<<UDRIE;                  // enable interrupt when buffer is empty
 264:	55 9a       	sbi	0x0a, 5	; 10
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
