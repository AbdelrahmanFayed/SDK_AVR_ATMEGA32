
CommRX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800064  00800064  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b0e  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000807  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f1  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037b  00000000  00000000  000023b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000272d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_13>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3d       	cpi	r26, 0xD5	; 213
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8a:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HardWare_CallBack>:
	return ret_val;
}


static void HardWare_CallBack()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	RX_FlageDataReciving  = 1;								    //set flage to notify the comm  
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <RX_FlageDataReciving>

	if ((!Rx_DataLock) && RX_Buffer_Index < FRAME__SIZE)			//check lock and size 
  9c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Rx_DataLock>
  a0:	81 11       	cpse	r24, r1
  a2:	12 c0       	rjmp	.+36     	; 0xc8 <HardWare_CallBack+0x36>
  a4:	c0 91 69 00 	lds	r28, 0x0069	; 0x800069 <RX_Buffer_Index>
  a8:	d0 91 6a 00 	lds	r29, 0x006A	; 0x80006a <RX_Buffer_Index+0x1>
  ac:	c4 36       	cpi	r28, 0x64	; 100
  ae:	d1 05       	cpc	r29, r1
  b0:	58 f4       	brcc	.+22     	; 0xc8 <HardWare_CallBack+0x36>
	{
		Rx_FrameBuffer[RX_Buffer_Index++] = Uart_ReadByte();		//store in buffer
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <RX_Buffer_Index+0x1>
  ba:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <RX_Buffer_Index>
  be:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Uart_ReadByte>
  c2:	c3 59       	subi	r28, 0x93	; 147
  c4:	df 4f       	sbci	r29, 0xFF	; 255
  c6:	88 83       	st	Y, r24
	}
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <RX_CommFree>:
static uint8*		  ptr_header;
static void (*RX_CallBack_ReciveComplete)(uint8* Rx_data);

void RX_CommFree()
{
	Rx_DataLock = COMM_UNLOCK_DATA;
  ce:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Rx_DataLock>
	RX_State = IDLE;
  d2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <RX_State>
	RX_Buffer_Index = 0;
  d6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <RX_Buffer_Index+0x1>
  da:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <RX_Buffer_Index>
	RX_FlageDataReciving =0;
  de:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <RX_FlageDataReciving>
	ptr_header=NULL;
  e2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ptr_header+0x1>
  e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ptr_header>
  ea:	08 95       	ret

000000ec <Comm_RxInit>:
		Rx_FrameBuffer[RX_Buffer_Index++] = Uart_ReadByte();		//store in buffer
	}
}

void Comm_RxInit(void (*ptr_Fu_ProcessDataRX)(uint8* Rx_data),uint8 User_header[HEADER_SIZE])
{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	8c 01       	movw	r16, r24
  f6:	eb 01       	movw	r28, r22
	RX_CommFree();
  f8:	0e 94 67 00 	call	0xce	; 0xce <RX_CommFree>
	Uart_init();
  fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <Uart_init>
	Uart_RxInterruptEnable(HardWare_CallBack);
 100:	89 e4       	ldi	r24, 0x49	; 73
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 76 01 	call	0x2ec	; 0x2ec <Uart_RxInterruptEnable>
	RX_CallBack_ReciveComplete = ptr_Fu_ProcessDataRX;
 108:	10 93 65 00 	sts	0x0065, r17	; 0x800065 <__data_end+0x1>
 10c:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <__data_end>
	ptr_header = User_header;
 110:	d0 93 67 00 	sts	0x0067, r29	; 0x800067 <ptr_header+0x1>
 114:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <ptr_header>
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <RX_com_dispatch>:

void RX_com_dispatch() 
{
	if (RX_FlageDataReciving )
 122:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <RX_FlageDataReciving>
 126:	88 23       	and	r24, r24
 128:	09 f4       	brne	.+2      	; 0x12c <RX_com_dispatch+0xa>
 12a:	5e c0       	rjmp	.+188    	; 0x1e8 <RX_com_dispatch+0xc6>
	{
		switch (RX_State)
 12c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <RX_State>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	39 f0       	breq	.+14     	; 0x142 <RX_com_dispatch+0x20>
 134:	b0 f0       	brcs	.+44     	; 0x162 <RX_com_dispatch+0x40>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	c1 f1       	breq	.+112    	; 0x1aa <RX_com_dispatch+0x88>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	09 f4       	brne	.+2      	; 0x140 <RX_com_dispatch+0x1e>
 13e:	47 c0       	rjmp	.+142    	; 0x1ce <RX_com_dispatch+0xac>
 140:	08 95       	ret
{
	uint8 i,ret_val=1;
	uint8* temp_ptr=(((RX_FrameStruct*)Rx_FrameBuffer)->header);
	for (i=0;i<HEADER_SIZE;i++)
	{	
		if (*ptr_header++ !=  *temp_ptr++ )
 142:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_header>
 146:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_header+0x1>
 14a:	cf 01       	movw	r24, r30
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ptr_header+0x1>
 152:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ptr_header>
 156:	90 81       	ld	r25, Z
 158:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Rx_FrameBuffer>
 15c:	98 17       	cp	r25, r24
 15e:	59 f0       	breq	.+22     	; 0x176 <RX_com_dispatch+0x54>
 160:	41 c0       	rjmp	.+130    	; 0x1e4 <RX_com_dispatch+0xc2>
	{
		switch (RX_State)
		{
			case IDLE:
			{
				if (RX_Buffer_Index > HEADER_SIZE)
 162:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <RX_Buffer_Index>
 166:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <RX_Buffer_Index+0x1>
 16a:	04 97       	sbiw	r24, 0x04	; 4
 16c:	e8 f1       	brcs	.+122    	; 0x1e8 <RX_com_dispatch+0xc6>
				{
					RX_State = CHEACK_HEADER;		
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <RX_State>
 174:	08 95       	ret
{
	uint8 i,ret_val=1;
	uint8* temp_ptr=(((RX_FrameStruct*)Rx_FrameBuffer)->header);
	for (i=0;i<HEADER_SIZE;i++)
	{	
		if (*ptr_header++ !=  *temp_ptr++ )
 176:	cf 01       	movw	r24, r30
 178:	02 96       	adiw	r24, 0x02	; 2
 17a:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Rx_FrameBuffer+0x1>
 17e:	21 81       	ldd	r18, Z+1	; 0x01
 180:	32 13       	cpse	r19, r18
 182:	06 c0       	rjmp	.+12     	; 0x190 <RX_com_dispatch+0x6e>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	32 81       	ldd	r19, Z+2	; 0x02
 188:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Rx_FrameBuffer+0x2>
 18c:	32 17       	cp	r19, r18
 18e:	29 f0       	breq	.+10     	; 0x19a <RX_com_dispatch+0x78>
 190:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ptr_header+0x1>
 194:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ptr_header>
 198:	25 c0       	rjmp	.+74     	; 0x1e4 <RX_com_dispatch+0xc2>
 19a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ptr_header+0x1>
 19e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ptr_header>
			}
			case CHEACK_HEADER: 
			{
				if (RX_check_header()) 
				{	
					RX_State = RECEIVE_BYTE;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <RX_State>
 1a8:	08 95       	ret
				}
				break;
			}
			case RECEIVE_BYTE: 
			{
				if (RX_Buffer_Index < FRAME__SIZE) 
 1aa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <RX_Buffer_Index>
 1ae:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <RX_Buffer_Index+0x1>
 1b2:	84 36       	cpi	r24, 0x64	; 100
 1b4:	91 05       	cpc	r25, r1
 1b6:	20 f4       	brcc	.+8      	; 0x1c0 <RX_com_dispatch+0x9e>
				{ 
					RX_State = RECEIVE_BYTE;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <RX_State>
 1be:	08 95       	ret
				}
				else if (RX_Buffer_Index == FRAME__SIZE)
 1c0:	84 36       	cpi	r24, 0x64	; 100
 1c2:	91 05       	cpc	r25, r1
 1c4:	89 f4       	brne	.+34     	; 0x1e8 <RX_com_dispatch+0xc6>
				{
					RX_State = RECEIVE_COMPLETE;
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <RX_State>
 1cc:	08 95       	ret
				}
				break;
			}
			case RECEIVE_COMPLETE: 
			{
				Rx_DataLock = COMM_LOCKE_DDATA;							//Lokk data 
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Rx_DataLock>
				RX_CallBack_ReciveComplete((((RX_FrameStruct*)Rx_FrameBuffer)->data));
 1d4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 1d8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 1dc:	81 e7       	ldi	r24, 0x71	; 113
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	09 95       	icall
				break;
			}
		}
	}
}
 1e2:	08 95       	ret
					RX_State = RECEIVE_BYTE;
				}
				else
				{
					//ERROR 
					RX_State = IDLE;
 1e4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <RX_State>
 1e8:	08 95       	ret

000001ea <my_fun>:
#include "avr/iom32.h"

static uint8 myheader[3]={1,2,3};
	
void my_fun(uint8* mydata)
{
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	8c 01       	movw	r16, r24
 1f6:	03 5a       	subi	r16, 0xA3	; 163
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8 i;
	for (i=0;i<RX_DATA_MAX_SIZE;i++)
	{
		Uart_SendByte(mydata[i]);
 1fa:	89 91       	ld	r24, Y+
 1fc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Uart_SendByte>
static uint8 myheader[3]={1,2,3};
	
void my_fun(uint8* mydata)
{
	uint8 i;
	for (i=0;i<RX_DATA_MAX_SIZE;i++)
 200:	c0 17       	cp	r28, r16
 202:	d1 07       	cpc	r29, r17
 204:	d1 f7       	brne	.-12     	; 0x1fa <my_fun+0x10>
	{
		Uart_SendByte(mydata[i]);
	}
	 RX_CommFree();
 206:	0e 94 67 00 	call	0xce	; 0xce <RX_CommFree>
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <main>:

int main(void)
{
	DDRB=0xff;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	87 bb       	out	0x17, r24	; 23
	DDRD |= 1<<1;
 218:	89 9a       	sbi	0x11, 1	; 17
	sei();
 21a:	78 94       	sei
    Comm_RxInit(my_fun,myheader);
 21c:	60 e6       	ldi	r22, 0x60	; 96
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	85 ef       	ldi	r24, 0xF5	; 245
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 76 00 	call	0xec	; 0xec <Comm_RxInit>
    while (1) 
    {
		RX_com_dispatch();
 228:	0e 94 91 00 	call	0x122	; 0x122 <RX_com_dispatch>
 22c:	fd cf       	rjmp	.-6      	; 0x228 <main+0x14>

0000022e <__vector_14>:
}

void Uart_TxInterruptEnable(void (*ptr)())
{
	ptr_CallBackfnUartTx=ptr;           // assign ptr to call back fun
	ACCESS_REG_8BIT((UARTCONTROLB+UART_BASE)) |= 1<<UDRIE;                  // enable interrupt when buffer is empty
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <ptr_CallBackfnUartTx>
 254:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <ptr_CallBackfnUartTx+0x1>
 258:	09 95       	icall
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_13>:
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 29e:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <ptr_CallBackfnUartRx>
 2a2:	f0 91 d2 00 	lds	r31, 0x00D2	; 0x8000d2 <ptr_CallBackfnUartRx+0x1>
 2a6:	09 95       	icall
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <Uart_init>:
 2ca:	89 e1       	ldi	r24, 0x19	; 25
 2cc:	89 b9       	out	0x09, r24	; 9
 2ce:	8a b1       	in	r24, 0x0a	; 10
 2d0:	88 61       	ori	r24, 0x18	; 24
 2d2:	8a b9       	out	0x0a, r24	; 10
 2d4:	80 b5       	in	r24, 0x20	; 32
 2d6:	86 68       	ori	r24, 0x86	; 134
 2d8:	80 bd       	out	0x20, r24	; 32
 2da:	08 95       	ret

000002dc <Uart_SendByte>:
 2dc:	5d 9b       	sbis	0x0b, 5	; 11
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <Uart_SendByte>
 2e0:	8c b9       	out	0x0c, r24	; 12
 2e2:	08 95       	ret

000002e4 <Uart_ReadByte>:
 2e4:	5f 9b       	sbis	0x0b, 7	; 11
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <Uart_ReadByte>
 2e8:	8c b1       	in	r24, 0x0c	; 12
 2ea:	08 95       	ret

000002ec <Uart_RxInterruptEnable>:
}

void  Uart_RxInterruptEnable(void (*ptr)())
{
	ptr_CallBackfnUartRx = ptr;         // assign ptr to call back fun
 2ec:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <ptr_CallBackfnUartRx+0x1>
 2f0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <ptr_CallBackfnUartRx>
	ACCESS_REG_8BIT((UARTCONTROLB+UART_BASE)) |= 1<<RXCIE;                  // enable interrupt when data recieved 
 2f4:	57 9a       	sbi	0x0a, 7	; 10
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
